import numpy as np
from scipy.signal import welch

from src.meegsim.waveform import white_noise, narrowband_oscillation, one_over_f_noise


def prepare_inputs():
    n_series = 10
    n_times = 100
    times = np.linspace(0, 1, num=n_times)
    return n_series, n_times, times


def test_white_noise_shape():
    n_series, n_times, times = prepare_inputs()

    data = white_noise(n_series, times)
    assert data.shape == (n_series, n_times)


def test_white_noise_random_state():
    n_series, _, times = prepare_inputs()

    # Different time series are generated by default
    data1 = white_noise(n_series, times)
    data2 = white_noise(n_series, times)
    assert not np.allclose(data1, data2)

    # The results are reproducible when random_state is set
    random_state = 1234567890
    data1 = white_noise(n_series, times, random_state=random_state)
    data2 = white_noise(n_series, times, random_state=random_state)
    assert np.allclose(data1, data2)


def test_one_over_f_noise_shape():
    n_series, n_times, times = prepare_inputs()

    data = one_over_f_noise(n_series, times)
    assert data.shape == (n_series, n_times)


def test_one_over_f_noise_random_state():
    n_series, _, times = prepare_inputs()

    # Different time series are generated by default
    data1 = one_over_f_noise(n_series, times)
    data2 = one_over_f_noise(n_series, times)
    assert not np.allclose(data1, data2)

    # The results are reproducible when random_state is set
    random_state = 1234567890
    data1 = one_over_f_noise(n_series, times, random_state=random_state)
    data2 = one_over_f_noise(n_series, times, random_state=random_state)
    assert np.allclose(data1, data2)


def test_frequencies_in_band():
    # Test that frequencies within the specified band have higher power
    n_series, n_times, times = prepare_inputs()
    fs = 100.0
    fmin = 8.0
    fmax = 12.0
    data = narrowband_oscillation(n_series, times, fs, fmin=fmin, fmax=fmax)

    # Calculate power spectral density
    freqs, power = welch(data, fs=fs, axis=1)

    # Sort frequencies by power
    sorted_freqs = freqs[np.argsort(power.mean(axis=0))[::-1]]

    # Check if frequencies within the band are among the most powerful
    band_freqs = sorted_freqs[(sorted_freqs >= fmin) & (sorted_freqs <= fmax)]
    assert len(band_freqs) > 0, "No frequencies found in the specified band."
    assert np.all((band_freqs >= fmin) & (band_freqs <= fmax)), "Not all powerful frequencies are in the specified band."
    assert data.shape == (n_series, n_times), "Shape mismatch"


def test_random_state_consistency():
    # Test that fixing the random_state gives consistent results
    n_series, n_times, times = prepare_inputs()
    fs = 100.0
    random_state = 42
    data1 = narrowband_oscillation(n_series, times, fs, random_state=random_state)
    data2 = narrowband_oscillation(n_series, times, fs, random_state=random_state)
    assert np.allclose(data1, data2), "Results differ with the same random_state."

    # Test that different random_state gives different results
    data3 = narrowband_oscillation(n_series, times, fs)
    data4 = narrowband_oscillation(n_series, times, fs)
    assert not np.allclose(data3, data4), "Results should differ with different random_state."
    assert data1.shape == (n_series, n_times), "Shape mismatch"

